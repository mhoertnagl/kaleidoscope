// http://lalrpop.github.io/lalrpop/tutorial/005_building_asts.html
use std::str::FromStr;
use crate::ast::{
  Module, Statement, Expr, Opcode
};

grammar;

pub Module: Module = {
  <ss:Statement*> => Module {
    statements: ss,
  },
};

Statement: Statement = {
  "let" <n:Id> "=" <e:Expr> => Statement::Let {
    name: n,
    expr: e,
  },
  "def" <n:Id> "(" ")" "begin" <ss:Statement*> "end" => Statement::Def {
    name: n,
    params: vec![],
    statements: ss,
  },
  <n:Id> "=" <e:Expr> => Statement::Assign {
    name: n,
    expr: e,
  },
  "return" <e:Expr> => Statement::Return {
    expr: e,
  },
}

// Params: Vec<String> = {
//   vec![<>]
// }

Expr: Expr = {
  <l:Expr> <x:ExprOp> <r:Factor> => Expr::BinOp {
    left: Box::new(l),
    op: x,
    right: Box::new(r),
  },
  Factor,
};

ExprOp: Opcode = {
  "+" => Opcode::Add,
  "-" => Opcode::Sub,
};

Factor: Expr = {
  <l:Factor> <x:FactorOp> <r:Term> => Expr::BinOp {
    left: Box::new(l),
    op: x,
    right: Box::new(r),
  },
  Term,
};

FactorOp: Opcode = {
  "*" => Opcode::Mul,
  "/" => Opcode::Div,
};

Term: Expr = {
  Num => Expr::Num(<>),
  "(" <Expr> ")",
};

Id: String = {
  r"[a-zA-Z][a-zA-Z0-9]*" => String::from(<>),
};

Num: f64 = {
  r"-?[0-9]+" => f64::from_str(<>).unwrap(),
  r"-?[0-9]*\.[0-9]*" => f64::from_str(<>).unwrap()
};
